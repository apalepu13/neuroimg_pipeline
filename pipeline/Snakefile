import snakemake
import os

"""
TODO: 
- Add rule to run aseg2srf for the new native space aseg.mgz mapped file.
- 

"""

"""
export SUBJECTS_DIR=~/hdd/data/neuroimaging/freesurfer_output/

A snakemake file for running reconstructions on the neuroimaging data.

snakemake --dag | dot -Tpdf > dag_neuroimaging_pipeline_reconstruction.pdf

Runs tests to ensure data is all in the corresponding format:

0. patient (raw)
    - premri
        - (list) dicoms
    - postct
        - (list) dicoms
    - dti
        - (list) dicoms

0b. freesurfer_output / reconstruction_output
    - patient (reconstruction)
        - (tree) files
    - finaloutput_datadir (stores all files we want to use in the next step)
    - success_file_flag.txt
    - stick all raw file

1. patient (processed)
    - mri
        - nifti volume image
    - ct
        - nifti volume image
    - dti (optional)
        - nifti volume image
    - elec
        - ct_in_t1_volume image
        - chans_xyz.txt
    - surface (how to draw out the brain; )
        - triangles.txt
        - vertices.txt
        - normals.txt
        - voxel_xyz.txt
    - parcellation (depends on atlas)
        -<atlas_1>
            - region_mapping_cort_<atlas>.txt
            - region_mapping_subcort_<atlas>.txt
            - region_centres_<atlas>.txt
            - region_areas_<atlas>.txt
            - region_cortical_<atlas>.txt
            - region_average_orientations_<atlas>.txt
            - label_in_T1_<atlas> volume image (maps all voxels to an atlas region)
    - connectome (depends on atlas)
        - tract_lengths_<atlas>.txt
        - weights_<atlas>.txt
        - gain_mat_<atlas>.txt (how to project regional activity -> sensor space | mainly for TVB)
    - seeg
        - edf
        - fif
    - scalp
        - edf
        - fif
    - clinical
        - ez_hypothesis_chans.txt
        - ez_hypothesis_<atlas>.txt
        - stores clinical metadata
        - PPTs related
    TUTORIAL_FILE.TXT

If this doesn't work off the bat, make sure you explicitly set SUBJECTS_DIR
"""
configfile: "./config/localconfig.yaml"
snakemake.utils.validate(config, "./config/preformat_config.schema.yaml")

# os.putenv('SUBJECTS_DIR', config['fs_outputdatadir']); os.system('bash')"

# get the environment variable for freesurfer - for use in getting access to lut's
FREESURFER_HOME = os.getenv("FREESURFER_HOME") or ''
MRTRIX3_HOME = os.getenv("MRTRIX3_HOME") or ''
HOME_DIR="../../"
SCRIPTS_UTIL_DIR = "../neuroimg/format/"
ATLAS=['dk', 'destrieux']

''' USER DEFINED DIRECTORIES TO STORE FINAL DATA IN ORGANIZED SUBFOLDERS '''
FS_PATIENT_OUTPUT_DIR = os.path.join(config['fs_outputdatadir'],
                                     "{patient_id}")

PATIENT_OUTPUT_DIR = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}")

COREGISTRATION_OUTPUT_DIR = os.path.join(config['finaloutput_datadir'],
                                         "{patient_id}",
                                         "coregistration")

TVB_OUTPUT_DIR = os.path.join(config['finaloutput_datadir'],
                                                "{patient_id}",
                                                "tvb")

# CONFORMSPACE_OUTPUT_DIR = os.path.join(TVB_OUTPUT_DIR)
NATIVESPACE_OUTPUT_DIR = os.path.join(PATIENT_OUTPUT_DIR,
                                      "nativespace-transform")


parc = "aparc.a2009s"
aa = "aparc+aseg"
sval = "pial"
hemispheres = ['lh', 'rh']
resamp_target = "fsaverage5"

print(config['patients'])

subworkflow reconstruction_workflow:
    workdir:
        "./reconstruction/"
    snakefile:
        "./reconstruction/Snakefile"
    configfile:
        "./config/localconfig.yaml"


# First rule
rule all:
    input:
        # output_dk_voxel_file = expand(os.path.join(config["finaloutput_datadir"],
        #                                            "{patient_id}", "voxel",
        #                                "voxels_in_T1_volume_dk.txt"),
        #                                 patient_id=config['patients']),
        # output_destrieux_voxel_file = expand(os.path.join(config["finaloutput_datadir"],
        #                                            "{patient_id}", "voxel",
        #                                             "voxels_in_T1_volume_destrieux.txt"),
        #                               patient_id=config['patients']),
        # master output file
        # output_file=expand(os.path.join(TVB_OUTPUT_DIR,
        #                                 "conformed_space",
        #                                 "connectivity_{atlas}.zip"),
        #                    patient_id=config['patients'], atlas=ATLAS),
        # master output file
        native_output_file = expand(os.path.join(TVB_OUTPUT_DIR,
                                    "native-space",
                                  "connectivity_{atlas}.zip"),
                     patient_id=config['patients'], atlas=ATLAS),
        # label in source lut volume
        # label_volume_file = expand(os.path.join(config['finaloutput_datadir'],
        #                                         "{patient_id}",
        #                                         "tvb",
        #                                          "label_in_T1_volume.{atlas}.nii.gz"),
        #                                     patient_id=config['patients'], atlas=ATLAS),
    shell:
        "echo 'done'"


"""
Rule for extracting the subcortical regions

- creates a new folder aseg2srf inside the fs_output data directory
- c/p this into our final result directory
"""
rule create_subcortical_volume:
    input:
        aseg_output_file=os.path.join(PATIENT_OUTPUT_DIR,
                                    "aseg.mgz"),
        norm_output_file=os.path.join(PATIENT_OUTPUT_DIR,
                                    "norm.mgz"),
    params:
        new_FREESURFER_HOME=PATIENT_OUTPUT_DIR,
        subj_dir=os.path.join(config['fs_outputdatadir']),
        patient="{patient_id}",
        scripts_dir=SCRIPTS_UTIL_DIR,
    output:
        subcort_success_flag_file=os.path.join(PATIENT_OUTPUT_DIR,
                                            "{patient_id}_subcort_success.txt"),
    shell:
        # generate subcortical region volume bounding surfaces
        "export SUBJECTS_DIR={params.subj_dir}; \
        SUBJECTS_DIR={params.subj_dir}; \
	    {params.scripts_dir}/aseg2srf -s {params.patient};"
        "cp -r {params.subj_dir}/{params.patient}/aseg2srf {params.new_FREESURFER_HOME}/aseg2srf_conformed;"
        "touch {output.subcort_success_flag_file};"

rule create_subcortical_volume_native:
    input:
        aseg_output_file=os.path.join(NATIVESPACE_OUTPUT_DIR,
                                    "aseg.mgz"),
        norm_output_file=os.path.join(NATIVESPACE_OUTPUT_DIR,
                                    "norm.mgz"),
    params:
        new_FREESURFER_HOME=PATIENT_OUTPUT_DIR,
        tempmridir = os.path.join(PATIENT_OUTPUT_DIR, "mri"),
        subj_dir = os.path.join(config['finaloutput_datadir']),
        patient = "{patient_id}",
        scripts_dir = SCRIPTS_UTIL_DIR,
    output:
        subcort_success_flag_file=os.path.join(PATIENT_OUTPUT_DIR,
                                            "{patient_id}_subcortnative_success.txt"),
    shell:
        "export SUBJECTS_DIR=~/hdd/data/neuroimaging/freesurfer_output/outputfile/;"

        # Create directories for temp files and result
        "mkdir -p {params.tempmridir};"
        "cp {input.aseg_output_file} {params.tempmridir}/aseg.mgz;"
        "cp {input.norm_output_file} {params.tempmridir}/norm.mgz;"

        "export SUBJECTS_DIR={params.subj_dir}; \
        SUBJECTS_DIR={params.subj_dir}; \
	    {params.scripts_dir}/aseg2srf -s {params.patient};"
        "cp -r {params.subj_dir}/{params.patient}/aseg2srf {params.new_FREESURFER_HOME}/aseg2srf_native;"
        "touch {output.subcort_success_flag_file};"

        # perform clean up of the aseg2srf performed on native files
        "rm -rf {params.subj_dir}/{params.patient}/aseg2srf;"
        "rm -rf {params.tempmridir};"

"""
Rule to convert nifti to MNI space image volumes.
"""
rule convert_to_mgz:
    input:
        CT_NIFTI_IMG_ORIG = os.path.join(PATIENT_OUTPUT_DIR,
                                    "CT.nii.gz"),
        PREMRI_NIFTI_IMG_ORIG = os.path.join(PATIENT_OUTPUT_DIR,
                                     "T1.nii.gz"),
    output:
        CT_NIFTI_IMG_MGZ = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                    "CT.mgz"),
        PREMRI_NIFTI_IMG_MGZ = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                     "preT1.mgz"),
    shell:
        "mrconvert {input.PREMRI_NIFTI_IMG_ORIG} {output.PREMRI_NIFTI_IMG_MGZ};"
        "mrconvert {input.CT_NIFTI_IMG_ORIG} {output.CT_NIFTI_IMG_MGZ};"

rule normalize_image:
    input:
        CT_NIFTI_IMG_MGZ = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                             "CT.mgz"),
        PREMRI_NIFTI_IMG_MGZ = os.path.join(PATIENT_OUTPUT_DIR,
                                            "T1.mgz"),
    output:
        CT_IMG_MGZ_norm = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                             "CT_normalize.mgz"),
        PREMRI_IMG_MGZ_norm = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                            "preT1_normalize.mgz"),
    shell:
        "cp {input.PREMRI_NIFTI_IMG_MGZ} {output.PREMRI_IMG_MGZ_norm};"
        "mri_normalize {input.CT_NIFTI_IMG_MGZ} {output.CT_IMG_MGZ_norm};"
        "mri_convert -c {output.CT_IMG_MGZ_norm} {output.CT_IMG_MGZ_norm};"

rule clean_structural_dataset:
    params:
        datadir = os.path.join(config['finaloutput_datadir'],
                               'tvb')
    shell:
        "rm {params.datadir}/*"

rule convert_coordinate_system:
    input:
        raw_ct_file = os.path.join(PATIENT_OUTPUT_DIR,
                                         "CT.nii.gz"),
        raw_mri_file = os.path.join(PATIENT_OUTPUT_DIR,
                                          "T1.nii.gz"),
        mgz_mri_file = os.path.join(PATIENT_OUTPUT_DIR,
                                        "T1.mgz"),
        desikan_orig_file=os.path.join(PATIENT_OUTPUT_DIR,
                               "aparc.a2009s+aseg.mgz"),
        destrieux_orig_file = os.path.join(PATIENT_OUTPUT_DIR,
                                   "aparc.a2009s+aseg.mgz"),
        talairach_transform_file = os.path.join(PATIENT_OUTPUT_DIR,
                                        "transforms/talairach.xfm"),
    output:
        ras_label_volume=os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                      "converted_coord_system",
                                        "label_{atlas}.RAS.nii.gz"),
        tal_label_volume = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                        "converted_coord_system",
                                        "label_{atlas}.TAL.nii.gz"),
        ras_std_label_volume=os.path.join(config['finaloutput_datadir'],
                                "{patient_id}",
                                "converted_coord_system",
                                "label_{atlas}.RAS.RO.nii.gz"),
        tal_std_label_volume = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                        "converted_coord_system",
                                        "label_{atlas}.TAL.RO.nii.gz"),
    run:
        if wildcards.atlas == "dk":
            shell("echo 'Running on desikan atlas!';")
            "echo 'mri_convert -rt nearest --out_orientation RAS {input.desikan_orig_file} \
                                                            {output.ras_label_volume}';"
            shell("mri_convert -rt nearest --out_orientation RAS {input.desikan_orig_file} \
                                                            {output.ras_label_volume};")
            shell("mri_convert {input.desikan_orig_file} --apply_transform {input.talairach_transform_file} -oc 0 0 0 {output.tal_label_volume};")

        elif wildcards.atlas == "destrieux":
            shell("echo 'Running on destrieux atlas!'")
            shell("mri_convert -rt nearest --out_orientation RAS {input.destrieux_orig_file} \
                                                            {output.ras_label_volume};")
            shell("mri_convert {input.destrieux_orig_file} --apply_transform {input.talairach_transform_file} -oc 0 0 0 {output.tal_label_volume};")

        shell("fslreorient2std  {output.ras_label_volume} {output.ras_std_label_volume};")
        shell("fslreorient2std {output.tal_label_volume} {output.tal_std_label_volume};")

"""
Rule for converting labels in one volume to another labeling system.

Used for converting FS's lookup table to flirt's lookuptable, which is easier to read.

Rule for creating a label volume file that is mapped
in our simple space of FS (0-83 or 0-255) vs the unsequential mappings.

Makes things simpler to analyze under one LUT.
"""
rule create_label_in_mri_volume:
    input:
        ras_std_label_volume=os.path.join(PATIENT_OUTPUT_DIR,
                                "converted_coord_system",
                                "label_{atlas}.RAS.RO.nii.gz")
    params:
        lut_fs = os.path.join(FREESURFER_HOME, "FreeSurferColorLUT.txt"),
        lut_target = os.path.join(MRTRIX3_HOME, "share/mrtrix3/labelconvert/fs_default.txt")
    output:
        label_volume_file=os.path.join(TVB_OUTPUT_DIR,
                                "label_in_T1_volume.{atlas}.nii.gz")
    shell:
        "labelconvert {input.ras_std_label_volume} \
                    {params.lut_fs} \
                    {params.lut_target} \
                    {output.label_volume_file};"


"""
Rule for converting labeled volume image from reconstruction to a user-friendly file
that is labeled voxel per voxel with a brain index region.
"""
rule convert_voxel_labeling:
    input:
        desikan_orig_file = os.path.join(PATIENT_OUTPUT_DIR,
                                        "aparc+aseg.mgz"),
        destrieux_orig_file = os.path.join(PATIENT_OUTPUT_DIR,
                                        "aparc.a2009s+aseg.mgz")
    params:
        lut_fs = os.path.join(FREESURFER_HOME, "FreeSurferColorLUT.txt"),
        lut_target = os.path.join(MRTRIX3_HOME, "share/mrtrix3/labelconvert/fs_default.txt")
    output:
        output_dk_voxel_file = os.path.join(PATIENT_OUTPUT_DIR,
                                            "voxel",
                                            "voxels_in_T1_volume_dk.txt"),
        output_destrieux_voxel_file = os.path.join(PATIENT_OUTPUT_DIR,
                                                   "voxel",
                                                   "voxels_in_T1_volume_destrieux.txt")
    shell:
        # "cd {params.home_dir};"
        "python ./create_volume_voxel_files.py {input.desikan_orig_file} " \
                                            "{input.destrieux_orig_file} " \
                                            "{params.lut_target} " \
                                            "{output.output_dk_voxel_file} " \
                                            "{output.output_destrieux_voxel_file};"

"""
Help register images from conformed -> original native space

and also from original native space -> conformed
"""
rule register_conformed_to_orig:
    input:
        rawavg_file = os.path.join(PATIENT_OUTPUT_DIR,
                                        "rawavg.mgz"),
        t1_mgz_file = os.path.join(PATIENT_OUTPUT_DIR,
                           "T1.mgz"),
    output:
        registration_native_file = os.path.join(PATIENT_OUTPUT_DIR,
                                                "nativespace-transform",
                                                "register.native.dat"),
        registration_conformed_file = os.path.join(PATIENT_OUTPUT_DIR,
                                                "nativespace-transform",
                                                "register.conformed.dat")
    shell:
        "tkregister2 --mov {input.rawavg_file} --targ {input.t1_mgz_file} \
                --reg {output.registration_native_file} --noedit --regheader;"
        "tkregister2 --mov {input.t1_mgz_file} --targ {input.rawavg_file} \
                --reg {output.registration_conformed_file} --noedit --regheader;"



"""
Helps map back image volumes, brain masks to their native space.
"""
rule convert_to_anatomical_space:
    input:
        brainmask_file = reconstruction_workflow(os.path.join(PATIENT_OUTPUT_DIR,
                                      "brainmask.mgz")),
        rawavg_file = reconstruction_workflow(os.path.join(PATIENT_OUTPUT_DIR,
                                        "rawavg.mgz")),
        aseg_output_file = reconstruction_workflow(os.path.join(PATIENT_OUTPUT_DIR,
                                        "aseg.mgz")),
        wm_output_file = reconstruction_workflow(os.path.join(PATIENT_OUTPUT_DIR,
                                      "wm.mgz")),
        aparc_atlas_aseg_file = reconstruction_workflow(os.path.join(PATIENT_OUTPUT_DIR,
                                             "aparc.a2009s+aseg.mgz")),
        aparc_dkatlas_aseg_file = reconstruction_workflow(os.path.join(PATIENT_OUTPUT_DIR,
                                            "aparc+aseg.mgz")),
        lhpial = reconstruction_workflow(os.path.join(PATIENT_OUTPUT_DIR,
                              "lh.pial")),
        rhpial = reconstruction_workflow(os.path.join(PATIENT_OUTPUT_DIR,
                              "rh.pial")),
        norm_output_file = reconstruction_workflow(os.path.join(PATIENT_OUTPUT_DIR,
                                "norm.mgz")),
        registration_native_file = os.path.join(PATIENT_OUTPUT_DIR,
                                                "nativespace-transform",
                                                "register.native.dat"),

        lhlabel = reconstruction_workflow(os.path.join(PATIENT_OUTPUT_DIR,
                                                       "lh.aparc.annot")),
        rhlabel = reconstruction_workflow(os.path.join(PATIENT_OUTPUT_DIR,
                                                       "rh.aparc.annot")),
    params:
        patient_id = "{patient_id}",
        subj_dir = os.path.join(config['fs_outputdatadir']),
    output:
        brainmask_file = os.path.join(NATIVESPACE_OUTPUT_DIR,
                                      "brainmask_native.mgz"),

        wm_output_file = os.path.join(NATIVESPACE_OUTPUT_DIR,
                                      "wm_native.mgz"),
        aparc_atlas_aseg_file = os.path.join(NATIVESPACE_OUTPUT_DIR,
                                             "aparc.a2009s+aseg.native.mgz"),
        aparc_dkatlas_aseg_file = os.path.join(NATIVESPACE_OUTPUT_DIR,
                                            "aparc+aseg.native.mgz"),
        lhpial = os.path.join(NATIVESPACE_OUTPUT_DIR,
                              "lh_native.pial"),
        rhpial = os.path.join(NATIVESPACE_OUTPUT_DIR,
                              "rh_native.pial"),
        # lhlabel = os.path.join(NATIVESPACE_OUTPUT_DIR,
        #                        "lh.native.aparc.annot"),
        # rhlabel = os.path.join(NATIVESPACE_OUTPUT_DIR,
        #                        "rh.native.aparc.annot"),
        norm_output_file = os.path.join(NATIVESPACE_OUTPUT_DIR,
                                        "norm.mgz"),
        aseg_output_file = os.path.join(NATIVESPACE_OUTPUT_DIR,
                                        "aseg.mgz"),

    shell:
        "export SUBJECTS_DIR={params.subj_dir}; \
                SUBJECTS_DIR={params.subj_dir};"
        # convert surfaces to the native space
        "mri_surf2surf --sval-xyz pial --reg {input.registration_native_file}  \
                            --tval {output.lhpial} --tval-xyz {input.rawavg_file} --hemi lh --s {params.patient_id};"
        "mri_surf2surf --sval-xyz pial --reg {input.registration_native_file} \
                    --tval {output.rhpial} --tval-xyz {input.rawavg_file} --hemi rh --s {params.patient_id};"

        # convert volume to its previous volume, e.g. brian mask
        "mri_vol2vol --mov {input.brainmask_file} --targ {input.rawavg_file} \
                --regheader --o {output.brainmask_file} --no-save-reg;"
        "mri_vol2vol --mov {input.norm_output_file} --targ {input.rawavg_file} \
                        --regheader --o {output.norm_output_file} --no-save-reg;"

        # convert label volumes -> native space
        "mri_label2vol --seg {input.aseg_output_file} --temp {input.rawavg_file} \
                        --o {output.aseg_output_file} --regheader {input.aseg_output_file};"
        "mri_label2vol --seg {input.wm_output_file} --temp {input.rawavg_file} \
                                --o {output.wm_output_file} --regheader {input.wm_output_file};"
        "mri_label2vol --seg {input.aparc_atlas_aseg_file} --temp {input.rawavg_file} \
                                --o {output.aparc_atlas_aseg_file} --regheader {input.aparc_atlas_aseg_file};"
        "mri_label2vol --seg {input.aparc_dkatlas_aseg_file} --temp {input.rawavg_file} \
                                --o {output.aparc_dkatlas_aseg_file} --regheader {input.aparc_dkatlas_aseg_file};"
        # "mri_label2vol --annot {input.rhlabel} --temp {input.rawavg_file} \
        #                         --o {output.rhlabel} --regheader {input.rhlabel};"
        # "mri_label2vol --annot {input.lhlabel} --temp {input.rawavg_file} \
        #                         --o {output.lhlabel} --regheader {input.lhlabel};"


"""
Rule for converting the pial surfaces to ascii data, so that it is readable by python/matlab.
"""
rule convert_pial_surface_files:
    input:
        lhpial_native = os.path.join(PATIENT_OUTPUT_DIR,
                              "lh_native.pial"),
        rhpial_native = os.path.join(PATIENT_OUTPUT_DIR,
                              "rh_native.pial"),
    output:
        lhpial_native = os.path.join(PATIENT_OUTPUT_DIR,
                              "lh_native.asc"),
        rhpial_native = os.path.join(PATIENT_OUTPUT_DIR,
                              "rh_native.asc"),
    shell:
        "mris_convert {input.lhpial_native} {output.lhpial_native};"
        "mris_convert {input.rhpial_native} {output.rhpial_native};"

"""
Rule for extracting surface geometry information from the
MRI volumes
"""
rule create_structural_dataset:
    input:
        subcort_success_flag_file=os.path.join(PATIENT_OUTPUT_DIR,
                                    "{patient_id}_subcort_success.txt"),
        lhpial=os.path.join(PATIENT_OUTPUT_DIR,
                            "lh.pial.asc"),
        rhpial=os.path.join(PATIENT_OUTPUT_DIR,
                            "rh.pial.asc"),
        lhlabel=os.path.join(PATIENT_OUTPUT_DIR,
                            "lh.aparc.annot"),
        rhlabel=os.path.join(PATIENT_OUTPUT_DIR,
                            "rh.aparc.annot"),
        label_volume_file=os.path.join(TVB_OUTPUT_DIR,
                                "label_in_T1_volume.{atlas}.nii.gz"),
    params:
        subcortdir = os.path.join(PATIENT_OUTPUT_DIR, "aseg2srf_conformed"),
        subjdir=os.path.join(config['fs_outputdatadir'], "{patient_id}"),
        output_surface_dir=TVB_OUTPUT_DIR,
        lut_fs=os.path.join(FREESURFER_HOME, "FreeSurferColorLUT.txt"),
        lut_target=os.path.join(MRTRIX3_HOME, "share/mrtrix3/labelconvert/fs_default.txt"),
        scripts_dir=os.path.join(SCRIPTS_UTIL_DIR)
    output:
        output_file=os.path.join(TVB_OUTPUT_DIR,
                                "conformed_space",
                                "connectivity_{atlas}.zip")
    shell:
        "echo 'RUNNING CREATION OF FINAL FILES...';"
        "cd {params.scripts_dir};"
        # "touch {output.output_file};"
        "python -m create_surface_files {params.subjdir} \
                                        {params.subcortdir} \
                                        {params.lut_fs} \
                                        {params.lut_target} \
                                        {output.output_file} \
                                        {params.output_surface_dir};"

rule create_nativespace_structural_dataset:
    input:
        subcort_success_flag_file = os.path.join(PATIENT_OUTPUT_DIR,
                                         "{patient_id}_subcortnative_success.txt"),
        lhpial=os.path.join(NATIVESPACE_OUTPUT_DIR,
                            "lh_native.asc"),
        rhpial=os.path.join(NATIVESPACE_OUTPUT_DIR,
                            "rh_native.asc"),
        lhlabel=os.path.join(PATIENT_OUTPUT_DIR,
                            "lh.aparc.annot"),
        rhlabel=os.path.join(PATIENT_OUTPUT_DIR,
                            "rh.aparc.annot"),
        # lhlabel=os.path.join(NATIVESPACE_OUTPUT_DIR,
        #                     "lh.native.aparc.annot"),
        # rhlabel=os.path.join(NATIVESPACE_OUTPUT_DIR,
        #                     "rh.native.aparc.annot"),
    params:
        subcortdir = os.path.join(PATIENT_OUTPUT_DIR, "aseg2srf_native"),
        subjdir=os.path.join(config['fs_outputdatadir'], "{patient_id}"),
        output_surface_dir = os.path.join(TVB_OUTPUT_DIR, "native-space"),
        lut_fs=os.path.join(FREESURFER_HOME, "FreeSurferColorLUT.txt"),
        lut_target=os.path.join(MRTRIX3_HOME, "share/mrtrix3/labelconvert/fs_default.txt"),
        scripts_dir=os.path.join(SCRIPTS_UTIL_DIR)
    output:
        output_file=os.path.join(TVB_OUTPUT_DIR,
                                "native-space",
                                "connectivity_{atlas}.zip")
    shell:
        "echo 'RUNNING CREATION OF FINAL FILES...';"
        "cd {params.scripts_dir};"
        # "touch {output.output_file};"
        "python -m create_surface_files {params.subjdir} \
                                        {params.subcortdir} \
                                        {params.lut_fs} \
                                        {params.lut_target} \
                                        {output.output_file} \
                                        {params.output_surface_dir};"
